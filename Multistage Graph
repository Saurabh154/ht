
#include<stdio.h>
#include<stdlib.h>
#include <limits.h>
#define min(a,b) ((a<b) ? a : b)
#define INF INT_MAX
#define N 8
//using namespace std;
 
int shortestDist(int graph[N][N]) {
    
    int dist[N];
    dist[N-1] = 0;
 
    // Calculating shortest path for
    // rest of the nodes
    for (int i = N-2 ; i >= 0 ; i--)
    {
 
        // Initialize distance from i to
        // destination (N-1)
        dist[i] = INF;
 
        // Check all nodes of next stages
        // to find shortest distance from
        // i to N-1.
        for (int j = i ; j < N ; j++)
        {
            // Reject if no edge exists
            if (graph[i][j] == INF)
                continue;
 
            dist[i] = min(dist[i], graph[i][j] + dist[j]);
                                        
        }
    }
 
    return dist[0];
}
 

int main()
{
   //int INF = INT_MAX;
    int graph[N][N] =
       {{0, 5, 2, INF, INF, INF, INF, INF},
       {INF, 0, INF, INF, 4, 11, INF, INF},
       {INF, INF, INF, INF, 9, 5, 16, INF},
       {INF, INF, INF, INF, INF, INF, 2, INF},
       {INF, INF, INF, INF, INF, INF, INF, 18},
       {INF, INF, INF, INF, INF, INF, INF, 13},
       {INF, INF, INF, INF, INF, INF, INF, 2},
      {INF, INF, INF, INF, INF, INF, INF, INF}};
 
    printf("%d " , shortestDist(graph) );
    return 0;
}
